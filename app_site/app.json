[{"name":"server.R","content":"server = function(input, output){\r\nobserve({if (input$quit == 1)\r\n          stopApp()})\r\n\r\nlimits <- reactive({ if (input$limits) { limits <- c(input$lxlim, input$uxlim) } else {\r\n                         limits <- limits0 } })\r\n\r\noutput$manySliders <- renderUI({\r\n  slide.bars <- list()\r\n               for (j in 1:length(preds)){\r\n               if (terms[j+1] == \"factor\"){\r\n               slide.bars[[j]] <- list(selectInput(paste(\"pred\", j, sep = \"\"), names(preds0)[j], preds[[j]]$v.levels, multiple = FALSE))\r\n               }\r\n               if (terms[j+1] == \"numeric\"){\r\n               if (covariate == \"slider\") {\r\n               slide.bars[[j]] <- list(sliderInput(paste(\"pred\", j, sep = \"\"), names(preds0)[j],\r\n               min = preds[[j]]$v.min, max = preds[[j]]$v.max, value = preds[[j]]$v.mean))\r\n               }\r\n               if (covariate == \"numeric\") {\r\n               slide.bars[[j]] <- list(numericInput(paste(\"pred\", j, sep = \"\"), names(preds0)[j], value = zapsmall(preds[[j]]$v.mean, digits = 4)))\r\n               }}}\r\n               do.call(tagList, slide.bars)\r\n})\r\n\r\noutput$setlimits <- renderUI({\r\n        if (is.null(DNlimits)){\r\n               setlim <- list(checkboxInput(\"limits\", \"Set x-axis ranges\"),\r\n               conditionalPanel(condition = \"input.limits == true\",\r\n               numericInput(\"uxlim\", \"x-axis upper\", zapsmall(limits0[2], digits = 2)),\r\n               numericInput(\"lxlim\", \"x-axis lower\", zapsmall(limits0[1], digits = 2))))\r\n        } else{ setlim <- NULL }\r\n        setlim\r\n})\r\n\r\na <- 0\r\nnew.d <- reactive({\r\n               input$add\r\n               input.v <- vector(\"list\", length(preds))\r\n               for (i in 1:length(preds)) {\r\n               input.v[[i]] <- isolate({\r\n               input[[paste(\"pred\", i, sep = \"\")]]\r\n               })\r\n               names(input.v)[i] <- names(preds0)[i]\r\n               }\r\n               out <- data.frame(lapply(input.v, cbind))\r\n               if (a == 0) {\r\n               input.data <<- rbind(input.data, out)\r\n               }\r\n               if (a > 0) {\r\n               if (!isTRUE(compare(old.d, out))) {\r\n               input.data <<- rbind(input.data, out)\r\n               }}\r\n               a <<- a + 1\r\n               out\r\n})\r\n\r\np1 <- NULL\r\nold.d <- NULL\r\ndata2 <- reactive({\r\n               if (input$add == 0)\r\n               return(NULL)\r\n               if (input$add > 0) {\r\n               if (!isTRUE(compare(old.d, new.d()))) {\r\n               isolate({\r\n               mpred <- suppressWarnings({ getpred.DN(model, new.d())$pred })\r\n               se.pred <- getpred.DN(model, new.d(), set.rms=T)$SEpred\r\n               if (is.na(se.pred)) {\r\n               lwb <- \"No standard errors\"\r\n               upb <- \"by 'lrm'\"\r\n               pred <- mlinkF(mpred)\r\n               d.p <- data.frame(Prediction = zapsmall(pred, digits = 3),\r\n               Lower.bound = lwb, Upper.bound = upb)\r\n               } else {\r\n               lwb <- sort(mlinkF(mpred + cbind(1, -1) * (qnorm(1 - (1 - clevel)/2) * se.pred)))[1]\r\n               upb <- sort(mlinkF(mpred + cbind(1, -1) * (qnorm(1 - (1 - clevel)/2) * se.pred)))[2]\r\n               pred <- mlinkF(mpred)\r\n               d.p <- data.frame(Prediction = zapsmall(pred, digits = 3),\r\n               Lower.bound = zapsmall(lwb, digits = 3),\r\n               Upper.bound = zapsmall(upb, digits = 3))\r\n               }\r\n               old.d <<- new.d()\r\n               data.p <- cbind(d.p, counter = 1, count=0)\r\n               p1 <<- rbind(p1, data.p)\r\n               p1$counter <- seq(1, dim(p1)[1])\r\n               p1$count <- 0:(dim(p1)[1]-1) %% 11 + 1\r\n               p1\r\n               })\r\n               } else {\r\n               p1$count <- seq(1, dim(p1)[1])\r\n               }}\r\n               rownames(p1) <- c()\r\n               p1\r\n})\r\n\r\noutput$plot <- renderPlotly({\r\n  if (input$add == 0)\r\n               return(NULL)\r\n               if (is.null(new.d()))\r\n               return(NULL)\r\n               coll=c(\"#0E0000\", \"#0066CC\", \"#E41A1C\", \"#54A552\", \"#FF8000\", \"#BA55D3\",\r\n               \"#006400\", \"#994C00\", \"#F781BF\", \"#00BFFF\", \"#A9A9A9\")\r\n               lim <- limits()\r\n               yli <- c(0 - 0.5, 10 + 0.5)\r\n               dat2 <- data2()\r\n               if (dim(data2())[1] > 11){\r\n               input.data = input.data[-c(1:(dim(input.data)[1]-11)),]\r\n               dat2 <- data2()[-c(1:(dim(data2())[1]-11)),]\r\n               yli <- c(dim(data2())[1] - 11.5, dim(data2())[1] - 0.5)\r\n               }\r\n               in.d <- input.data\r\n               xx <- matrix(paste(names(in.d), \": \", t(in.d), sep = \"\"), ncol = dim(in.d)[1])\r\n               Covariates <- apply(xx, 2, paste, collapse = \"<br />\")\r\n               p <- ggplot(data = dat2, aes(x = Prediction, y = counter - 1, text = Covariates,\r\n               label = Prediction, label2 = Lower.bound, label3=Upper.bound)) +\r\n               geom_point(size = 2, colour = coll[dat2$count], shape = 15) +\r\n               ylim(yli[1], yli[2]) + coord_cartesian(xlim = lim) +\r\n               labs(title = \"95% Confidence Interval for Response\",\r\n               x = \"Probability\", y = \"\") + theme_bw() +\r\n               theme(axis.text.y = element_blank(), text = element_text(face = \"bold\", size = 10))\r\n               if (is.numeric(dat2$Upper.bound)){\r\n               p <- p + geom_errorbarh(xmax = dat2$Upper.bound, xmin = dat2$Lower.bound,\r\n               size = 1.45, height = 0.4, colour = coll[dat2$count])\r\n               } else{\r\n               message(\"Confidence interval is not available as there is no standard errors available by 'lrm' \")\r\n               }\r\n               gp <- ggplotly(p, tooltip = c(\"text\", \"label\", \"label2\", \"label3\"))\r\n               gp$elementId <- NULL\r\n               gp\r\n})\r\n\r\noutput$data.pred <- renderPrint({\r\n  if (input$add > 0) {\r\n               if (nrow(data2()) > 0) {\r\n               if (dim(input.data)[2] == 1) {\r\n               in.d <- data.frame(input.data)\r\n               names(in.d) <- names(terms)[2]\r\n               data.p <- cbind(in.d, data2()[1:3])\r\n               }\r\n               if (dim(input.data)[2] > 1) {\r\n               data.p <- cbind(input.data, data2()[1:3])\r\n               }}\r\n               stargazer(data.p, summary = FALSE, type = \"text\")\r\n}\r\n})\r\n\r\noutput$summary <- renderPrint({\r\nprint(model)\r\n})\r\n}\r\n","type":"text"},{"name":"ui.R","content":"ui = bootstrapPage(fluidPage(\r\n    titlePanel('Neurodevelopmental Disorders in Children'),\r\n    sidebarLayout(sidebarPanel(uiOutput('manySliders'),\r\n                               uiOutput('setlimits'),\r\n                               actionButton('add', 'Predict'),\r\n                               br(), br(),\r\n                               helpText('Press Quit to exit the application'),\r\n                               actionButton('quit', 'Quit')\r\n    ),\r\n    mainPanel(tabsetPanel(id = 'tabs',\r\n                          tabPanel('Graphical Summary', plotlyOutput('plot')),\r\n                          tabPanel('Numerical Summary', verbatimTextOutput('data.pred')),\r\n                          tabPanel('Model Summary', verbatimTextOutput('summary'))\r\n    )\r\n    )\r\n    )))\r\n","type":"text"},{"name":"README.txt","content":"This guide will describe how to deploy a shiny application using scripts generated by DNbuilder:\r\n\r\n1. Run the shiny app by setting your working directory to the DynNomapp folder, and then run: shiny::runApp() If you are using the RStudio IDE, you can also run it by clicking the Run App button in the editor toolbar after open one of the R scripts.\r\n\r\n2. You could modify codes to apply all the necessary changes. Run again to confirm that your application works perfectly.\r\n\r\n3. Deploy the application by either clicking on the Publish button in the top right corner of the running app, or use the generated files and deploy it on your server if you host any.\r\n\r\nYou can find a full guide of how to deploy an application on shinyapp.io server here:\r\nhttp://docs.rstudio.com/shinyapps.io/getting-started.html#deploying-applications\r\n\r\nPlease cite the package if using in publication.\r\n","type":"text"},{"name":"data.RData","content":"H4sIAAAAAAAABu29CXwcxZU/3jOjw7flAx8J2LLNZWzL9sz4kG15RsI2GHyAbc7gmJE0ksfM\nIc+MZMmGIBIC+0v+uSGEXBAgm4SwJGEXEkgWOdnPfiABQkI4PjkBQ1hvYAFzhAU21r97+r2q\nnjddfU3PyED351Oq6q567/vqvVevqrt61NvWXRgac+EYSZICUk2NXwrUykWp9rwdGxatlCT5\ngiT5pBpptJzXdMbyMbndFLlcJ+fj5ar7CvVq8heYqMlHyn7SzmcjBTQ0fk2ywitAzo3a0zq7\nchrx9Eulsh/rCe0psoVIV7SvoiTCNKoT+YMIm8prZGMz39KeU7041a+ePuyMFSu2CAgwy/Fl\nI1sb2SVgUCei18sDUrFt7dpDjz+NVVpZzfppVZ96PmU0NsxikpHeRHHTTjKTUa/vdJxobU91\nLOIb0NAY6VnkJ35CT33EKEYI/LdoLqxLxvviyZxcaihwUK/6lmIhiIUQIaztSMZySMe4dcU6\n8pmsXDpK5lUjvzLqu5nviPRvFqPMfFNUb+YnRv5kdzyLYoYRlpGsZjoVyW6kWyM9munPaBwY\njV0r407UViSD2bi06jNGdjDTlREPM30b6cFKP4z4GvmimcxW6a34rkheo7FpZXyY+bWRPEbY\ndv3cbPwY8bPiL3bGrJO2VmS3Yi+r+hO1M7OFma8Z2digr8r06B+W1BnRj/eam2PJOM6OG+Ip\n5azQMoAtjedOBVO7RhStFfXWjSJfp+sHn6S/vvHrXNcbSwGdOiMbamXwC/ho11hW/JDypOsu\nkT317ut9Jvg0ie4lRbIb3XtSO1GdBiRjf9CLqXr8qAyUr5FOzGwq6it9piLiSe1o5ut6Y1vU\nV61vUV8z8k+9dbyRDo3GnNFYpeNBL6aJ7C4aQ6KxrGcHqiOjeKAXC/TsrNeOtte7RvUu0pue\njkXj2MoYF/kc7ZfI36lsIl834qPnq0ZyGvVfNH70YrCVZGQvkf1FYxXKRXMn3oXWrFk6kMHb\nzaWLgvwktCgsn9iZR43w3+vJ7b6YzbXVkOG9rL9KYlvxX711jltylsurWro2wxGtv8qR0WhN\nZ4evaH7VS9XSr4gvjRWi/hqtAcz6YzdZodOTyQmfYyzp3oP6t+DEGbgonrN9+1nJ9B5U8fs2\nVcMWI23vkcb3kmfvavffbKqzurwwo7Oqa9HUX45NaR+NliY6qVLTppXVpt7qU/TUVXuu10Ur\n9FRdevVmJkNM+nRH9DRV29aKO9I2Zk8dzdzSSOd6fRQ9zTZb3Yt0arYy13uqqEdv9KTZrO+i\nVbieffSGk/a6FR8U6V/PZ8xktfLESuS7ZjQi3IBOMhsXVvzFCNtIn6IxaMU/rYwPK7yN9GfF\nJlbGu6idCFv0dLcoDUqFw2k/zPRhNt704osertETbis+ZEUGMz8T2YSOJZ/gqW1gU2YfFMdt\nTOfj2VS8MxHL4yZozZmJ7t1WJtPit43SsZQyBxea1yHS+nUbsbg93g/FMa3d8V3d2UxvTw6u\n1G9tj+cS+QE4nXTO7oFcoiOW3NXakU/08YqpZ6cz+5LxTpk+k961IS7Lne4mgozOZvY1oTDj\nFVUorjU8fHQD6ROqoy7fntzV2YVyymcop/IWclNXVual1+FUpjOelNSXlGfLMONB/Qr/m+T0\nYZWghuLpv7ql8JcmKCeRVyU8rJH5FbLJ0QOfL9Csfbb/kYlNB6Xozj+Oe6z50OHo8VLRETn8\n1Oxdz5x2VuTZO9cOHdzxpcihjTNuWDJvQuSxP4yecMbQ3yKPXfvbky9deH3k1zu/dNX0x++I\nPPzIHR//zddejfxuaceBL1/3w8hjkfmLr++VIg98+ZX77p+3PfLGn+MnTJv5/ej4gVVNz5/7\nt8hvvjhr+PpTd5DeT0b9bm1Hq4/eHOtvXBfPJvpQ4ZsVlTZuatrWxF4Eb+rCsu8cLJyOvNb1\no2fUnhFLpWJ4siPWuwhP/NtQX/XbgqeGw0vnI7x8umKh5oJSHwotK67XXKhtyybiWRSiG/l3\nZ1mpB+w4BkahBMYZHTm8bt+VH77u0YO+X7bdvG1l39ChV5sWbHr4PyJHrlzzzKa2eyJvXnXl\nn078emPkf2ZPmTD7Y4NDb/p//p3mZauGjsRv2X/bY08PvXP5r4dfap5LlDoa1TSwtiWoKYdQ\nofKga4F3GtQrDXzstWg3bLTX1b0b9fpYGJktygJbvXRcyejUVM7RG6EtOlFmpm5DNfQUnFoZ\nVrWgv5ro+Sdd/Y2LvrcqumJcZPjB+TMOzvnrmK/etvWyQebWRWMz0JlI4ejXJBwrS6Nt39qw\n+IX/3BOdn7vwtUvenhpd0Lbz7YVzn4nOab33L+euvi/aNvPeh+96sjU6/+VpzbfWHY283Xpc\nx3mPT2DtW/4+GPn3NS8gfHT67V/5+Hl/Whtd82z35Tfd/93o/E3f+OllXxmOSge6P/3LB5Yj\nf9Y+svTA4q8e+XZ07uEXNzR1tkVX1477zq4dyei8OZ8/+eurX468Ne9Tqc/e9QqTB/lj+zWv\nz7/x4vTd0ZXbT2ybdfGHo3Njo9qOvH1d5MV7Jw4/f+MqJj/Kg/yx/fmzXp338IVPRKOff/zi\ngRenRyefeeuvttydwf4y+UEe5M/at7beGD1081TsD9MP9BflZ/IAf9Z/OFfNVj+ssVU9JLTV\nhGj0b1e8/J1be6Njk1dPeW32F6PN/7Kg67JZP4hOOml7/Mz+Z6LLnw58c+3hJdHG216Z+5Mp\ngWg4e82TN37o8ugc3/pPfvy7e6Lbb47+/fsDfdF5bw4k6t55KBpd/b2rPnvtPVHpo+++2XrN\nKdFJv3jyqc99ZXvk4L3fvOC5W7+pI5Ofy1T86lDJsFPr69/bw68oxNRivMN46mvHcBfDUm1C\nmW/xpD/NJkw1+K19/NCPT3lXku6Hmen++6b/4N5D8vmPBp772e+fkfO2zXcMyOf//MZP06/L\n9Y8s+Opfj39Vuv/OdQfuuFS+/q0Ht77yGxzkH4TgV/A8nxoAC4sCf/Ta634//Mcnnot+4vf9\n8etuvEbTxq/q2Xfv0LOfeaqm/s23hl4auHLFbRP/Gnl3yScO/NOrn40825I60vqDByLPXf8L\n34Ord+L50LM/H/vo+U98O/Lfra8ffq39a0OvXfj1f5z72/BB39Ozf/rutjH0OrbHen5dxT1Y\nt+fuozfVLhh6Z8Op7ee0/JDJc+QvM+rPjq0dei3iv+H22CVDv5t8y4w7r9mA7ZAucnjfHWft\nyV/B+EI/hr6/MHDzjx49yHKgZ/Ihzos/vn3aCxO/x3Awf2v7S3NmppeXXKdyIi7KhzmRn/Uf\n6TEX8kXcYn0x+f8r1XLP4P89h/1D+xz03Xl77qHfvsP0gPKgHqBfjA/DBbsSO7Mc+0Pa0/4w\nv7nurv2Ppn7XyPqN8oM/MblBjhL9QD3rD9MX0QfgmPoV5ujnvzxj2t+/fMGlQnsQ/2XntP+o\nN+RH7Fni94SeyUn9BNozfYKemH2ofGSc4bjg9gS/whz94t3zFx9/5IGb2XUiN+sXjh84j7yY\n3Pb41NgnSuSi+kD+6H/YT+x3ib9Djnb6x7f6b/rD+Fnsesl4BT2gvlA+zFk80h9PJX6HfLBf\n2A+UH8cd8mN+CnzQr5GO2YX4MW2H/N5suvvVF55/DPGjo2be8oXY5OepXIwP6oPGPeSD/kP8\nPfJWU/TKH95wItIx+ZGPyL+Zf5D+0HgIdmd+RORg5ygH+tdTc/unLp40mfGBuMP6TeMXnb+o\nvZh/FM8jNC5hPYsnIH9JnMC4Q/pBxzf1Hy4vxhOQh8530D/ULxsnYGeUW5TzeQDOUb9kfJfY\nAftB5pOhX5/5tbsaPnczO6d+hn5J4/qTP5twxRfOvUc4jsh8zMdLsX6Z3ISO6RH5IB4Z/3Re\nY+sbyJm8R36SjB/61ELGn647aJyi8YzOcygP5uBXDBfsgOObxVPMkQ7tB3bgcVwwPsm4L5mn\ncZzQuED1S9dbZF7i5yRu4zii/k7nWfRDoncaj0v8m/oVXQ+hnn6Vz/v+PPENph/UO9FXiZ2Q\nL/oJGb9MXsBDupL1E/FT1u6RAw9e/UTDS5F3Htp1x7q3P8biO44zwGV+AfYvkZO0Y/1HfaN8\nEE8ZHfgX0kUDO2+o+8zT/xo5+sgt3z1h22HGh84T6Ff/u+C2a8ZJJw+98chDl177/L8xPQEO\nkxv7i/Y+uv5QX9PZ05gcqEfSb4YPOZMP6VBOpEP5QK/M/jQn9mLyIR88h36y9m+e9+kv9r10\njXA8QntqLyY/Xgc+9Hq0bsZVU/IvLC7BxXkQ9QH+zOTEdoBXfJ/ru9foATAUwlhYhoXlWFiB\nhZVYaMYb+KVLWGkpKwVZKcRKYVZaxkrLWWkFK61kJYYRZBhBhhFkGEGGEWQYQYYRZBhBhhFk\nGEGGEWIYIYYRYhghhhFiGCGGEWIYIYYRYhghhhFmGGGGEWYYYYYRZhhhhhFmGGGGEWYYYYax\njGEsYxjLGMYyhrGMYSxjGMsYxjKGsYxhLGMYyxnGcoaxnGEsZxjLGcZyhrGcYSxnGMsZxnKG\nsYJhrGAYKxjGCoaxgmGsYBgrGMYKhrGCYaxgGCsZxkqGsZJhrGQYKxnGSoaxkmGsZBgrGcZK\nhtHMMJoZRjPDaGYYzQyjmWE0M4xmhtHMMJoRI7B0yRJeXMqLQV4M8WKYF5fx4nJeXMGLK3mR\noy3laEs52lKOtpSjLeVoSznaUo62lKMt5WhLOVqQowU5WpCjBTlakKMFOVqQowU5WpCjBTla\niKOFOFqIo4U4WoijhThaiKOFOFqIo4U4WpijhTlamKOFOVqYo4U5WpijhTlamKOFOdoyjraM\noy3jaMs42jKOtoyjLeNoyzjaMo62jKMt52jLOdpyjracoy3naMs52nKOtpyjLedoyznaCo62\n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\n1obFL/znnuj83IWvXfL21OiCtp1vL5z7THRO671/OXf1fdG2mfc+fNeTrdH5L09rvrXuaOTt\n1uM6znt8Amvf8vfByL+veQExo9Nv/8rHz/vT2uiaZ7svv+n+70bnb/rGTy/7ynBUOtD96V8+\nsBz5s/aRpQcWf/XIt6NzD7+4oamzLbq6dtx3du1IRufN+fzJX1/9cuSteZ9KffauV5g8yB/b\nr3l9/o0Xp++Ortx+Ytusiz8cnRsb1Xbk7esiL947cfj5G1cx+VEe5I/tz5/16ryHL3wiGv38\n4xcPvDg9OvnMW3+15e4M9pfJD/Igf9a+tfXG6KGbp2J/mH6gvyg/kwf4s/7DuY6t6iGhrSZE\no3+74uXv3NobHZu8esprs78Ybf6XBV2XzfpBdNJJ2+Nn9j8TXf504JtrDy+JNt72ytyfTAlE\nw9lrnrzxQ5dH5/jWf/Lj390T3X5z9O/fH+iLzntzIFH3zkPR6OrvXfXZa++JSh99983Wa06J\nTvrFk0997ivbIwfv/eYFz936TYH/gEzFK8aSsfa+2GbTvcvzYRD1tWOMi2GpNqF9Stef5k92\nCxFv7eOHfnyKvI65H6aj+++b/oN7D8nnPxp47me/f0bO2zbfIU/B9//zGz9Nvy7XP7Lgq389\n/lXp/jvXHbjjUvn6tx7c+spvcGR/ECKe9qmN+iwoeu11vx/+4xPPRT/x+/74dTdeo2njV/Xs\nu3fo2c88VVP/5ltDLw1cueK2iX+NvLvkEwf+6dXPRp5tSR1p/cEDkeeu/4XvwdU78Xzo2Z+P\nffT8J74d+e/W1w+/1v61odcu/Po/zv1t+KDv6dk/fXfbGHod22M9v67iHqzbc/fRm2oXDL2z\n4dT2c1p+yOQ58pcZ9WfH1g69FvHfcHvskqHfTb5lxp3XbMB2SBc5vO+Os/bkr2B8oR9D318Y\nuPlHjx5kOdAz+RDnxR/fPu2Fid9jOJi/tf2lOTPTy0uuUzkRF+XDnMjP+o/0mAv5Im6xvpj8\n/5VquWfw/57D/qF9DvruvD330G/fYXpAeVAP0C/Gh+GCXYmdWY79Ie1pf5jfXHfX/kdTv2tk\n/Ub5wZ+Y3CBHiX6gnvWH6YvoA3BM/Qpz9PNfnjHt71++4FKhPYj/snPaf9Qb8iP2LPF7Qs/k\npH4C7Zk+QU/MPlQ+Ms5wXHB7gl9hjn7x7vmLjz/ywM3sOpGb9QvHD5xHXkxue3xq7BMlclF9\nIH/0P+wn9rvE3yFHO/3jW/03/WH8LHa9ZLyCHlBfKB/mLB7pj6cSv0M+2C/sB8qP4w75MT8F\nPujXSMfsQvyYtkN+bzbd/eoLzz+G+NFRM2/5Qmzy81Quxgf1QeMe8kH/If4eeaspeuUPbzgR\n6Zj8yEfk38w/SH9oPAS7Mz8icrBzlAP966m5/VMXT5rM+EDcYf2m8YvOX9RezD+K5xEal7Ce\nxROQvyROYNwh/aDjm/oPlxfjCchD5zvoH+qXjROwM8otyvk8AOeoXzK+S+yA/SDzydCvz/za\nXQ2fu5mdUz9Dv6Rx/cmfTbjiC+feIxxHZD7m46VYv0xuQsf0iHwQj4x/Oq+x9Q3kTN4jP0nG\nD31qIeNP1x00TtF4Ruc5lAdz8CuGC3bA8c3iKeZIh/YDO/A4LhifZNyXzNM4TmhcoPql6y0y\nL/FzErdxHFF/p/Ms+iHRO43HJf5N/Yquh1BPv8rnfX+e+AbTD+qd6KvETsgX/YSMXyYv4CFd\nyfqJ+Clr98iBB69+ouGlyDsP7bpj3dsfY/EdxxngMr8A+5fISdqx/qO+UT6Ip4wO/AvpooGd\nN9R95ul/jRx95JbvnrDtMOND5wn0q/9dcNs146STh9545KFLr33+35ieAIfJjf1Fex9df6iv\n6expTA7UI+k3w4ecyYd0KCfSoXygV2Z/mhN7MfmQD55DP1n7N8/79Bf7XrpGOB6hPbUXkx+v\nAx96PVo346op+RcWl+DiPIj6AH9mcmI7wCu+z/X+W4Lk/beEQsn7bwnef0vgRe+/JahF778l\nqEXvvyWoRe+/JahF778lqEXvvyWoRe+/JahF778lqEXvvyWoRe+/JahF778lFIref0uAovff\nEtSi998S1GJQYv8NgCXtz8nwWoOkeYV1yzb15YRxE6FV2Z8HNvtsbKU/V1/uZ1ydfg7Wqvx2\n6av9WXu3D7v9tuoX5fqVVbmc+qldvTv1W7c+8+1UD3b1YdY/q/Vu8Tfja5WuXPtVKs44HQ/l\n+pVTOaziOR1H5fqTmRxO5bXL12n/Ko1vla/b84FdHKvtqxWvzeRwi17Ex+14Xu7841Q+Eb3b\n7ez2zypuuXyd4ldqXFnFdTtOlTsu3YpnZjh2653yd9t/7eK6ZWenfmD1uplcbsXVcv2pUusn\np/RuzXt26cyOkaJ3exzaXe+5Pf+ayeG03gxPdFSKvlz7OJWnXL6VjudO12duxYly42el58Vy\n179mfEU4VuUod30jOtyaD+0eduV1uk50yx/M5LDKz2r9sebH5R4jJYdb60Kr/OzSlzvvldvO\n7aPafufWOtusfbnzUbnxulL6dOs+olLrnGr5k9N1vNl1t49Kr4Oc0leq/8eK3d3m53TdUu11\nF60v185u0TttZ3ddV637nXKPStm1XD2I6qvth9WaV932a6d+XG5cKfe+1er1co9q8bfbrtr3\nzaJ2lZ7H7fqXWW4Xz65cbt8PmtG77T/l8imXv1tHte873DpGWm/eYe041u1yrK9HvKO844Oq\n9/dK/C33fqZax7E234w0vttHtdfjbuHaPcq9b6jUvGT3+UO17h+OlcPp/ZvoutPnAuXe55kd\ndu3sNHcLT8THLn+35PHy93eOx0jL4eVefizleIy0HF4/ysvxGGk5vNzLvdwb317uTk4Pp35h\ntZ0Zvlt4TuWxys9t/m7pV9SOHlbtXyn/Mjus+ofZuVN/MZPDbXy36Mv1Y9Fhd9xaPdzWmxkf\np7hmclitN5NDVG9VPhGd08PtuEvryz3KHV9O5SnX7iI6u/K4ZX+346BT/3d7/nBqV6fj0q34\nRNuZHW7112kcdHqUa2e7fNyOA2aH03nZ6fxl93Dqf26NE7vtzNpb5ef2Oqbco9J2sHuUO97L\nnf/djgt2+VUqLrvVb6fjwy29VvqotF0qhe+Ub6WPSuntWO2P23TVPkZazkrjuz2+RlpfTo9K\nyX2sjstKxedq9Xek1oVO17He4R3ewQ9vvFT2cOu5jXdYO8z1p3xMs175mOZ4OfkLH9SUL6jX\nRynXp6jXvY9tYsn72Kb3sU3vY5vexzah6H1sUy16H9tUi97HNpWi97FNLHof21SL3sc21aL3\nsU216H1ss1D0PrYJRe9jm2rR+9imWvQ+tqkWvY9tqkXysc0GSXlMpV4asz3e37Ihnool43Cl\nobU7vqs7m+ntybUsXRQcyOhcDy0Ks+tjt7bHc4n8QMtF8RxcOu6c3QO5REcsuau1I5/oK66c\nc3Y6sy8Z75S5ZdK7NsTjnYl0d8vGdD6eTcnlWB4Fmanb8MxE926p8EHQwHh45OaDpDxqC0Dy\nkbKftPPZSAENjV+TrPAKkHOj9rTOrpxGPP1SqezHekJ7imwh0hXtqyiJMI3qRP4gwqbyGtnY\nzLe051QvTvWrpw87Y8WKLQICzHJ82cjWRnYJGNSJ6PXygFRsW7v20ONPY5VWVrN+WtWnnk8Z\njQ2zmCSSRxQz7SQz+fT6TceIVh6qXxHfgIbGSMciH/ETeuofRvFB4LvKlpJf2VJqKNCoE6Tu\nVlKhaQCb4vey67piHflMVq2tgVpvT0ry9qQKJW9PytuT4kVvT0otentSatHbk1KL3p6UWvT2\npNSityelFr09KbXo7UmpRW9PSi16e1Jq0duTKhS9PSkoentSatHbk1KLQamwnyPVSdLoYfUR\n1Zhh9Xysksvn4yBXro23UZ4A+cRhwJDLDZryJE15MpaPqjL4htWklKfI+VQoHwdlpZ1fecVb\nef27QU612KXt8X4ojuGbZnClHrbL4HRSyVYZVEzV2/2qIpBfCySZ5kUPFqujiaPS+2MrU9uH\n0XIfirowkYuq7YHmsrYDY6ADXMSpJfLzukY9qXSkn6HXTiM8WntUh0zTnckOlH2ujqla/VQY\nc7WA7Qfams1cZ3WgweKn5TVrljI91Wp1WatqsJiffwtWBxSFWahEnMCmzD4ojtNRZo2quBEZ\nLgHQnLJzLtUPqgPXh7lUtItRtONgqGXjDQfcqdfF0+zU6+5wmNqsDGyzvlIj24TyVw/Kjkat\ne6exAFX3XwWwFgFZyJd7syre1RXvyGMAbe3c05vLN+ZZTFd6VNxmgkLVk5UZy8iZNIbUQsOS\nyxqFGSlnTGcsH2vqysZScYmvDLwo5SBKMc2NAV+WoOyX+EHrBO1GZlUyBdDpOBmP2k0rbgJ2\nTcba40k86U0n8ijJqI5MUmmI52NSKXKlLpbL9TJOY9Wzpo5MJ2PeE8umWOtkIsW51/XFkr2M\n0+h0Jp1MpOOxLOooz3Q0LqH4R6wwKHISX3ehn41KZrobM52dTM6tcrlxW0xuL/OpEwyY+q5M\nNtWbjKnV0+Tq6bCmHqk1P4rKRBzdF8smYu3JwuCp01TUJBO5fLGQRaAIiGAaoCKAejWiyuz9\nSjyfBW6Dvqx3VKiO/pS10N1aSfenrHId+Mj6dRvfT7c8JfYZq8TFpsIAzVVRjiIZajPZznhW\n4itinbd6ir22MFw74j2Kh05QKvgvmYsajsrGcz3ykI4Dcw0zNlpxjNcqmsgZDl28bX8PjfiR\nxGazHKpeWbm9LOFiEVYqHZlUjxwjdsk2zcX3ktqa9ljBeH4Nl/GAoBg+EAWzRxvUXPOT9qMa\nmjpNuZ5LEYSehbDXxhiNehgjd5sTgKBaJ+kfPiJctYPaUZBPlsPXpZGFusDEznhXPCuvSnfl\n8lmVVM8mDRLzMknDltWjzTXPt1jXcU1Ym04lcti/moy8WIDy5HSsqTOejyWSTTxm6N8jdMaT\n8TwsgYsWZjqRiAkwGzG7srKTg34HCivSNDuVl0Z7e9niWV7p7GM6rs3lY2xhU9Mly4lLl46M\nvPJPdCTiaVY/NpHuyjSlYrI20bq+XqRNyHEOw2NnvE/G70DIMfISqSmXzPSwRdMkdcXUBPcM\nykQOw7Ynno4l8wPFKPX74vKimsvZ385WW3X9+WwsjTW+bbiC35ZA8ExPflcqnt+d6cRGTHjU\nQo3sfdjxunWyc3aj8sbk5Kp4QU7sXA6DsU58V5aVnHi0bPyY9o6oSMFsstkW7yI+wW41ktkU\nFjlIoDuZ4r6oPGctDNs69d7Wd59U/D6k916/Pg+/VCr7sZ7QniJbiHRF+ypKIkyjOpE/iLC9\n9/ol4TvN5fiyka2N7OK912/sA0a+YEZP++W921/sF8fKu/3sR3H3SaUKs+KoVoOUSMlmgcjM\nAUX1Zs5g5DR2B60oMBhhGclqplOR7Ea6NdKjmf6MnN1ogFoZXKK2IhnMBp9VnzGyg5mujHiY\n6dtID1b6YcTXyBfNZLZKb8V3RfIajU0r48PMr43kMcK26+dm48eInxV/sTNmnbS1IrsVe1nV\nn6idmS3MfM3IxgZ9dXubujB3KpjahaBoQai3OBT5Ol0k+CT9RYxf57reWAro1BnZUCuDX8BH\nu5Cy4oeUJ11cieypd/PuM8GnSXTDKJLd6AaT2onqNCAZ+4NeTNXjR2WgfI10YmZTUV/pgxMR\nT2pHM1/XG9uivmp9i/qakX/qLdaNdGg05ozGKh0PejFNZHfRGBKNZT07UB0ZxQO9WKBnZ712\ntL3eNap3kd70dCwax1bGuMjnRA/+9OIJ9R09Xzfio+erRnIa9V80fvRisJVkZC+R/UVjFcqV\nfOWq5AGuXmx7Lye3+2I211ZDhvey/iqJbcV/9dY5bslZLq9q6doMR7T+KkdGozWdHb6i+VUv\nVUu/Ir40Voj6a7QGMOuP3WSFTk8mJ3yOseTiO73s9rOS6T2o4vdtqoYtRtreI43vJc/e1e6/\n2VRndXlhRmdV16Kpvxyb0j4aLU10UqWmTSurTb3Vp+ipq/Zcr4tW6Km69OrNTIaY9OmO6Gmq\ntq0Vd6RtzJ46mrmlkc71+ih6mm22uhfp1GxlrvdUUY/e6EmzWd9Fq3A9++gNJ+11Kz4o0r+e\nz5jJauWJlch3zWhEuAGdZDYurPiLEbaRPkVj0Ip/WhkfVngb6c+KTayMd1E7Ebbo6W5RGpQK\nh9N+mOnDbLzpxRc9XKMn3FZ8yIoMZn4msgkdS75q/qyzyq/Es194Fn6DpDjP8PDRDYKXiuvy\n7cldnV3s12rt+EZyyQ8xi37zUteRjPfFk/JV5acXNaqDzhimv8vaobwN3bRD4q+wg+LnU+0V\nXm4uVJ0mrqrDt5tnS+pL/4pJleY3yenDgrfx9d8AYz+80LxLb5HMr5BNjh74fIFm7bP9j0xs\nOihFd/5x3GPNhw5Hj5eKjsjhp2bveua0syLP3rl26OCOL0UObZxxw5J5EyKP/WH0hDOG/hZ5\n7Nrfnnzpwusjv975paumP35H5OFH7vj4b772auR3SzsOfPm6H0Yei8xffH2vFHngy6/cd/+8\n7ZE3/hw/YdrM70fHD6xqev7cv0V+88VZw9efuoP0fjIqb2s7+23i5lh/47p4NtGHJt6c6Ywn\nGzc1bWtC/+5s6sKy7xwsnI681vWzXwqcEUul2EvvO2K9i/DEvw31Vb8teGo4vHQ+wsunKxZq\nLij1odCy4nrNhdq2bIL9isDXjfy7s6zUI5X8PqJgnNGRw+v2Xfnh6x496Ptl283bVvYNHXq1\nacGmh/8jcuTKNc9sarsn8uZVV/7pxK83Rv5n9pQJsz82OPSm/+ffaV62auhI/Jb9tz329NA7\nl/96+KXmuUSpo1FNA2tbgpoy/m+X9+p/ztD8jKqgv5ro+Sdd/Y2LvrcqumJcZPjB+TMOzvnr\nmK/etvWyQebWJT90xIQDZGm07VsbFr/wn3ui83MXvnbJ21OjC9p2vr1w7jPROa33/uXc1fdF\n22be+/BdT7ZG5788rfnWuqORt1uP6zjv8QmsfcvfByP/vuYFxIxOv/0rHz/vT2uja57tvvym\n+78bnb/pGz+97CvDUelA96d/+cBy5M/aR5YeWPzVI9+Ozj384oamzrbo6tpx39m1IxmdN+fz\nJ3999cuRt+Z9KvXZu15h8iB/bL/m9fk3Xpy+O7py+4ltsy7+cHRubFTbkbevi7x478Th529c\nxeRHeZA/tj9/1qvzHr7wiWj0849fPPDi9OjkM2/91Za7M9hfJj/Ig/xZ+9bWG6OHbp6K/WH6\ngf6i/Ewe4M/6D+c6tqqHhLaaEI3+7YqXv3Nrb3Rs8uopr83+YrT5XxZ0XTbrB9FJJ22Pn9n/\nTHT504Fvrj28JNp42ytzfzIlEA1nr3nyxg9dHp3jW//Jj393T3T7zdG/f3+gLzrvzYFE3TsP\nRaOrv3fVZ6+9Jyp99N03W685JTrpF08+9bmvbI8cvPebFzx36zcF/gMyFb+DVDLW3hf/rUb3\nB30+DKK+doxxMSzVJrQ/du9P83+QUIh4ax8/9ONT3pWk+2E6uv++6T+495B8/qOB5372+2fk\nvG3zHQPy+T+/8dP063L9Iwu++tfjX5Xuv3PdgTsula9/68Gtr/wGR/YHIeKxn/QpKxhFh/7o\ntdf9fviPTzwX/cTv++PX3XiNpo1f1bPv3qFnP/NUTf2bbw29NHDlitsm/jXy7pJPHPinVz8b\nebYldaT1Bw9Enrv+F74HV+/E86Fnfz720fOf+Hbkv1tfP/xa+9eGXrvw6/8497fhg76nZ//0\n3W1j6HVsj/X8uop7sG7P3Udvql0w9M6GU9vPafkhk+fIX2bUnx1bO/RaxH/D7bFLhn43+ZYZ\nd16zAdshXeTwvjvO2pO/gvGFfgx9f2Hg5h89epDlQM/kQ5wXf3z7tBcmfo/hYP7W9pfmzEwv\nL7lO5URclA9zIj/rP9JjLuSLuMX6YvL/V6rlnsH/ew77h/Y56Lvz9txDv32H6QHlQT1Avxgf\nhgt2JXZmOfaHtKf9YX5z3V37H039rpH1G+UHf2Jygxwl+oF61h+mL6IPwDH1K8zRz395xrS/\nf/mCS4X2IP7Lzmn/UW/Ij9izxO8JPZOT+gm0Z/oEPTH7UPnIOMNxwe0JfoU5+sW75y8+/sgD\nN7PrRG7WLxw/cB55Mbnt8amxT5TIRfWB/NH/sJ/Y7xJ/hxzt9I9v9d/0h/Gz2PWS8Qp6QH2h\nfJizeKQ/nkr8Dvlgv7AfKD+OO+TH/BT4oF8jHbML8WPaDvm92XT3qy88/xjiR0fNvOULscnP\nU7kYH9QHjXvIB/2H+HvkrabolT+84USkY/IjH5F/M/8g/aHxEOzO/IjIwc5RDvSvp+b2T108\naTLjA3GH9ZvGLzp/UXsx/yieR2hcwnoWT0D+kjiBcYf0g45v6j9cXownIA+d76B/qF82TsDO\nKLco5/MAnKN+yfgusQP2g8wnQ78+82t3NXzuZnZO/Qz9ksb1J3824YovnHuPcByR+ZiPl2L9\nMrkJHdMj8kE8Mv7pvMbWN5AzeY/8JBk/9KmFjD9dd9A4ReMZnedQHszBrxgu2AHHN4unmCMd\n2g/swOO4YHyScV8yT+M4oXGB6peut8i8xM9J3MZxRP2dzrPoh0TvNB6X+Df1K7oeQj39Kp/3\n/XniG0w/qHeirxI7IV/0EzJ+mbyAh3Ql6yfip6zdIwcevPqJhpci7zy06451b3+MxXccZ4DL\n/ALsXyInacf6j/pG+SCeMjrwL6SLBnbeUPeZp/81cvSRW757wrbDjA+dJ9Cv/nfBbdeMk04e\neuORhy699vl/Y3oCHCY39hftfXT9ob6ms6cxOVCPpN8MH3ImH9KhnEiH8oFemf1pTuzF5EM+\neA79ZO3fPO/TX+x76RrheIT21F5MfrwOfOj1aN2Mq6bkX1hcgovzIOoD/JnJie0Ar/g+1/uC\nl+R9watQ8r7g5X3Bixe9L3ipRe8LXmrR+4KXWvS+4KUWvS94qUXvC15q0fuCl1r0vuClFr0v\neKlF7wteatH7gleh6H3BC4reF7zUovcFL7UYlIr+u3DJP//Faw0Sfz3Sv2Wb+nLCuInQSvu/\no20dSEfpRedm7UT8za5T/iI8Mxy7fKzKb5feqvxO9VPpw26/rfpFuX5lVS6nfmpX70791qk/\n2uXj1I/sjier9W7xN+Nrla5c+1UqzjgdD+X6lVM5rOI5HUfl+pOZHE7ltcvXaf8qjW+Vr9vz\ngV0cq+2rFa/N5HCLXsTH7Xhe7vzjVD4Rvdvt7PbPKm65fJ3iV2pcWcV1O06VOy7dimdmOHbr\nnfJ323/t4rplZ6d+YPW6mVxuxdVy/alS6yen9G7Ne3bpzI6Rond7HNpd77k9/5rJ4bTeDE90\nVIq+XPs4ladcvpWO507XZ27FiXLjZ6XnxXLXv2Z8RThW5Sh3fSM63JoP7R525XW6TnTLH8zk\nsMrPav2x5sflHiMlh1vrQqv87NKXO++V287to9p+59Y626x9ufNRufG6Uvp06z6iUuucavmT\n03W82XW3j0qvg5zSV6r/x4rd3ebndN1S7XUXrS/Xzm7RO21nd11Xrfudco9K2bVcPYjqq+2H\n1ZpX3fZrp35cblwp977V6vVyj2rxt9uu2vfNonaVnsft+pdZbhfPrlxu3w+a0bvtP+XyKZe/\nW0e17zvcOkZab95h7TjW7XKsr0e8o7zjg6r390r8Lfd+plrHsTbfjDS+20e11+Nu4do9yr1v\nqNS8ZPf5Q7XuH46Vw+n9m+i60+cC5d7nmR127ew0dwtPxMcuf7fk8fL3d47HSMvh5V5+LOV4\n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\nTc1sG5sDAA==","type":"binary"},{"name":"functions.R","content":"getpred.DN <-\r\nfunction (model, newd, set.rms = F) \r\n{\r\n    inrange <- T\r\n    mclass <- getclass.DN(model)$model.class\r\n    if (!mclass %in% c(\"lm\", \"glm\", \"coxph\", \"ols\", \"lrm\", \"Glm\", \r\n        \"cph\", \"gam\", \"glmnet\")) \r\n        stop(\"Unrecognized model object type.\")\r\n    if (mclass %in% c(\"ols\", \"lrm\", \"Glm\", \"cph\")) {\r\n        if (set.rms == T) {\r\n            model <- update(model, x = T, y = T, data = data)\r\n        }\r\n        else {\r\n            model <- update(model, x = T, y = T)\r\n        }\r\n    }\r\n    if (mclass %in% c(\"ols\", \"lrm\", \"Glm\")) {\r\n        m.pred <- predict(model, newdata = newd, se.fit = TRUE)\r\n        mpred <- m.pred$linear.predictors\r\n        se.pred <- m.pred$se.fit[[1]]\r\n    }\r\n    if (mclass %in% c(\"lm\", \"glm\", \"gam\")) {\r\n        mpred <- broom::augment(x = model, newdata = newd, se_fit = T)$.fitted\r\n        se.pred <- broom::augment(x = model, newdata = newd, \r\n            se_fit = T)$.se.fit\r\n    }\r\n    if (mclass %in% c(\"coxph\")) {\r\n        mpred <- broom::augment(x = model, newdata = newd, se_fit = T, \r\n            type.predict = \"expected\")$.fitted\r\n        se.pred <- broom::augment(x = model, newdata = newd, \r\n            se_fit = T, type.predict = \"expected\")$.se.fit\r\n    }\r\n    if (mclass %in% c(\"cph\")) {\r\n        strata.l <- levels(model$strata)\r\n        if (length(model$strata) != length(levels(attr(predict(model, \r\n            newd, type = \"x\", expand.na = FALSE), \"strata\")))) {\r\n            levels(model$strata) <- levels(attr(predict(model, \r\n                newd, type = \"x\", expand.na = FALSE), \"strata\"))\r\n        }\r\n        m.pred <- suppressWarnings({\r\n            survest(model, newdata = newd, times = newd[, all.vars(model$terms)[1]])\r\n        })\r\n        mpred <- -log(m.pred$surv)\r\n        se.pred <- m.pred$std.err\r\n        if (mpred == 0) {\r\n            inrange = F\r\n        }\r\n    }\r\n    list(pred = mpred, SEpred = se.pred, InRange = inrange)\r\n}\r\ngetclass.DN <-\r\nfunction (model) \r\n{\r\n    mfamily <- NA\r\n    mclass <- attr(model, \"class\")[1]\r\n    if (mclass == \"coxph.null\") \r\n        stop(\"Error in model syntax: the model is null\")\r\n    if (!mclass %in% c(\"lm\", \"glm\", \"coxph\", \"ols\", \"lrm\", \"Glm\", \r\n        \"cph\", \"gam\", \"glmnet\")) \r\n        stop(\"Unrecognized model object type.\")\r\n    if (mclass %in% c(\"elnet\", \"lognet\", \"multnet\", \"fishnet\", \r\n        \"coxnet\", \"mrelnet\")) {\r\n        mclass <- \"glmnet\"\r\n        mfamily <- attr(model, \"class\")[1]\r\n    }\r\n    if (mclass %in% c(\"glm\", \"Glm\")) \r\n        mfamily <- model$family$family\r\n    if (mclass == \"lrm\") \r\n        mfamily <- mclass\r\n    list(model.class = mclass, model.family = mfamily)\r\n}\r\n","type":"text"},{"name":"global.R","content":"library(ggplot2)\r\nlibrary(shiny)\r\nlibrary(plotly)\r\nlibrary(stargazer)\r\nlibrary(compare)\r\nlibrary(rms)\r\n\r\n#######################################################\r\n#### Before publishing your dynamic nomogram:\r\n####\r\n#### - You may need to edit the following lines if\r\n#### data or model objects are not defined correctly\r\n#### - You could modify ui.R or server.R for\r\n#### making any required changes to your app\r\n#######################################################\r\n\r\nload('data.RData')\r\nsource('functions.R')\r\nt.dist <- datadist(data)\r\noptions(datadist = 't.dist')\r\nm.summary <- 'raw'\r\ncovariate <- 'slider'\r\nclevel <- 0.95\r\n\r\n### Please cite the package in publications if it is used.\r\n# Read more on:\r\n# Jalali, A., Alvarez-Iglesias, A., Roshan, D., & Newell, J. (2019). Visualising statistical models using dynamic nomograms. PLoS one, 14(11), e0225253.\r\n\r\n\r\n","type":"text"}]
